---
# Links
- name: link | link app1 to db
  lineinfile: dest=/etc/hosts regexp='{{ db.alias }}$' line='{{ db.ip }} {{ db.alias }}' state=absent backup=yes

- name: link | link app1 to index
  lineinfile: dest=/etc/hosts regexp='{{ index.alias }}$' line='{{ index.ip }} {{ index.alias }}' state=absent backup=yes

- name: link | link app1 to logserver
  lineinfile: dest=/etc/hosts regexp='{{ logserver.logstash.alias }}$' line='{{ logserver.logstash.ip }} {{ logserver.logstash.alias }}' state=absent backup=yes

# Logstash forwarder
- name: logstash-forwarder | create certificate dir
  file: state="directory" dest="/etc/pki/tls/certs"

- name: logstash-forwarder | create certificate dir
  copy: src=../logserver/private/logsash-forwarder.crt dest=/etc/pki/tls/certs

- name: logstash-forwarder | create init script
  copy: src=logsash-forwarder.init dest=/etc/init.d/logsash-forwarder mode=774

- name: logstash-forwarder | add repository key
  apt_key: url=http://packages.elasticsearch.org/GPG-KEY-elasticsearch

- name: logstash-forwarder | add apt repository
  apt_repository: repo='deb http://packages.elasticsearch.org/elasticsearch/{{ logserver.elasticsearch.version }}/debian stable main' update_cache=yes

- name: logstash-forwarder | install
  apt: pkg=logstash-forwarder state=latest update_cache=yes

- name: logstash-forwarder | configure
  template: src=logstash-forwarder.conf.j2 dest=/etc/logstash-forwarder
  notify: logstash-forwarder | restart

- name: logstash-forwarder | schedule at restart
  shell: "update-rc.d logstash-forwarder defaults"

# Clone app with version xxx
- name: package application | clone
  local_action: git repo="git@github.com:lgueye/app1.git" dest="/tmp" local_action=yes version="{{ app1.version }}"

- name: package application | package
- local_action: shell "cd {{ workdir }}/app1 && mvn clean package"

- name: package application | remote dir
  file: dest="/opt/app1/{{ app1.version }}" state="present"

- name: package application | remote dir
  file: dest="/opt/app1/{{ app1.version }}"
